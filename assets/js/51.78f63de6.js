(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{370:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("一个 SpringBoot 项目，未进行任何特殊配置，全部采用默认设置，这个项目同一时刻，最多能同时处理多少请求？")]),t._v(" "),a("p",[t._v("能处理多少呢？")]),t._v(" "),a("p",[t._v("我也不知道，但是当问题变成上面这样之后，我找到了探索答案的角度。")]),t._v(" "),a("p",[t._v("既然“未进行任何特殊配置”，那我自己搞个 Demo 出来，压一把不就完事了吗？")]),t._v(" "),a("p",[t._v("坐稳扶好，准备发车。")]),t._v(" "),a("h1",{attrs:{id:"测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),a("h2",{attrs:{id:"创建demo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建demo"}},[t._v("#")]),t._v(" 创建DEMO")]),t._v(" "),a("p",[t._v("小手一抖，先搞个 Demo 出来。")]),t._v(" "),a("p",[t._v("这个 Demo 非常的简单，就是通过 idea 创建一个全新的 SpringBoot 项目就行。")]),t._v(" "),a("p",[t._v("我的 SpringBoot 版本使用的是 2.7.13。")]),t._v(" "),a("p",[t._v("整个项目只有这两个依赖：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091508182.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("整个项目也只有两个类，要得就是一个空空如也，一清二白。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091508483.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("项目中的 TestController，里面只有一个 getTest 方法，用来测试，方法里面接受到请求之后直接 sleep 一小时。")]),t._v(" "),a("p",[t._v("目的就是直接把当前请求线程占着，这样我们才能知道项目中一共有多少个线程可以使用：")]),t._v(" "),a("div",{staticClass:"language-Java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Slf4j")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RestController")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestController")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GetMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/getTest"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{} 接受到请求:num={}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HOURS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("项目中的 application.properties 文件也是空的：\n"),a("img",{attrs:{src:"http://image.bejavaer.top/blog/202308091509973.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("这样，一个“未进行任何特殊配置”的 SpringBoot 不就有了吗？")]),t._v(" "),a("p",[t._v("基于这个 Demo，前面的面试题就要变成了：我短时间内不断的调用这个 Demo 的 getTest 方法，最多能调用多少次？")]),t._v(" "),a("p",[t._v("问题是不是又变得更加简单了一点？")]),t._v(" "),a("p",[t._v("那么前面这个“短时间内不断的调用”，用代码怎么表示呢？")]),t._v(" "),a("p",[t._v("很简单，就是在循环中不断的进行接口调用就行了。")]),t._v(" "),a("div",{staticClass:"language-Java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MainTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" finalI "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpUtil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"127.0.0.1:8080/getTest?num="')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" finalI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//阻塞主线程")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("当然了，这个地方你用一些压测工具，比如 jmeter 啥的，会显得逼格更高，更专业。我这里就偷个懒，直接上代码了。")]),t._v(" "),a("h2",{attrs:{id:"答案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#答案"}},[t._v("#")]),t._v(" 答案")]),t._v(" "),a("p",[t._v("经过前面的准备工作，Demo 和测试代码都就绪了。")]),t._v(" "),a("p",[t._v("接下来就是先把 Demo 跑起来：\n"),a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091509653.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("然后跑一把 MainTest。")]),t._v(" "),a("p",[t._v("当 MainTest 跑起来之后，Demo 这边就会快速的、大量的输出这样的日志：\n"),a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091509875.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("也就是我前面 getTest 方法中写的日志：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091510854.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("好，现在我们回到这个问题：")]),t._v(" "),a("blockquote",[a("p",[t._v("我短时间内不断的调用这个 Demo 的 getTest 方法，最多能调用多少次？")])]),t._v(" "),a("p",[t._v("来，请你告诉我怎么得到这个问题的答案？")]),t._v(" "),a("p",[t._v("我这里就是一个大力出奇迹，直接统计“接受到请求”关键字在日志中出现的次数就行了：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091510392.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("很显然，答案就是：\n"),a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091510631.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("所以，当面试官问你：一个 SpringBoot 项目能同时处理多少请求？")]),t._v(" "),a("p",[t._v("你装作仔细思考之后，笃定的说：200 次。")]),t._v(" "),a("p",[t._v("面试官微微点头，并等着你继续说下去。")]),t._v(" "),a("p",[t._v("你也暗自欢喜，幸好看了歪歪歪师傅的文章，背了个答案。然后等着面试官继续问其他问题。")]),t._v(" "),a("p",[t._v("气氛突然就尴尬了起来。")]),t._v(" "),a("p",[t._v("接着，你就回家等通知了。")]),t._v(" "),a("p",[t._v("200 次，这个回答是对的，但是你只说 200 次，这个回答就显得有点尬了。")]),t._v(" "),a("p",[t._v("重要的是，这个值是怎么来的？")]),t._v(" "),a("p",[t._v("所以，下面这一部分，你也要背下来。")]),t._v(" "),a("h1",{attrs:{id:"怎么来的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么来的"}},[t._v("#")]),t._v(" 怎么来的？")]),t._v(" "),a("p",[t._v("在开始探索怎么来的之前，我先问你一个问题，这个 200 个线程，是谁的线程，或者说是谁在管理这个线程？")]),t._v(" "),a("p",[t._v("是 SpringBoot 吗？")]),t._v(" "),a("p",[t._v("肯定不是，SpringBoot 并不是一个 web 容器。")]),t._v(" "),a("p",[t._v("应该是 Tomcat 在管理这 200 个线程。")]),t._v(" "),a("p",[t._v("这一点，我们通过线程 Dump 也能进行验证：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091511189.png",alt:"image.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091511790.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("通过线程 Dump 文件，我们可以知道，大量的线程都在 sleep 状态。而点击这些线程，查看其堆栈消息，可以看到 Tomcat、threads、ThreadPoolExecutor 等关键字：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("at org.apache.Tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)\nat org.apache.Tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\nat org.apache.Tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\nat org.apache.Tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\nat org.apache.Tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n")])])]),a("p",[t._v("基于“短时间内有 200 个请求被立马处理的”这个现象，结合你背的滚瓜烂熟的、非常扎实的线程池知识，你先大胆的猜一个：Tomcat 默认核心线程数是 200。")]),t._v(" "),a("p",[t._v("接下来，我们就是要去源码里面验证这个猜测是否正确了。")]),t._v(" "),a("p",[t._v("我之前分享过阅读源码的方式，《我试图通过这篇文章，教会你一种阅读源码的方式。》，其中最重要的一条就是打一个有效的断点，然后基于断点处的调用栈去定位源码。")]),t._v(" "),a("p",[t._v("这里我再教你一个不用打断点也能获取到调用栈的方法。")]),t._v(" "),a("p",[t._v("在前面已经展示过了，就是线程 Dump。")]),t._v(" "),a("p",[t._v("右边就是一个线程完整的调用栈：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091511704.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("从这个调用栈中，由于我们要找的是 Tomcat 线程池相关的源码，所以第一次出现相关关键字的地方就是这一行：")]),t._v(" "),a("blockquote",[a("p",[t._v("org.apache.Tomcat.util.threads.ThreadPoolExecutor.Worker#run")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091512712.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("然后我们在这一行打上断点。")]),t._v(" "),a("p",[t._v("重启项目，开始调试。")]),t._v(" "),a("p",[t._v("进入 runWorker 之后，这部分代码看起来就非常眼熟了：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091512675.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("简直和 JDK 里面的线程池源码一模一样。")]),t._v(" "),a("p",[t._v("如果你熟悉 JDK 线程池源码的话，调试 Tomcat 的线程池，那个感觉，就像是回家一样。")]),t._v(" "),a("p",[t._v("如果你不熟悉的话，我建议你尽快去熟悉熟悉。")]),t._v(" "),a("p",[t._v("随着断点往下走，在 getTask 方法里面，可以看到关于线程池的几个关键参数：")]),t._v(" "),a("blockquote",[a("p",[t._v("org.apache.Tomcat.util.threads.ThreadPoolExecutor#getTask")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091512317.png",alt:"image.png"}}),t._v(" "),a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091512981.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("corePoolSize，核心线程数，值为 10。")]),t._v(" "),a("p",[t._v("maximumPoolSize，最大线程数，值为 200。")]),t._v(" "),a("p",[t._v("而且基于 maximumPoolSize 这个参数，你往前翻代码，会发现这个默认值就是 200：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091512699.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("好，到这里，你发现你之前猜测的“Tomcat 默认核心线程数是 200”是不对的。")]),t._v(" "),a("p",[t._v("但是你一点也不慌，再次结合你背的滚瓜烂熟的、非常扎实的线程池知识。")]),t._v(" "),a("p",[t._v("并在心里又默念了一次：当线程池接受到任务之后，先启用核心线程数，再使用队列长度，最后启用最大线程数。")]),t._v(" "),a("p",[t._v("因为我们前面验证了，Tomcat 可以同时间处理 200 个请求，而它的线程池核心线程数只有 10，最大线程数是 200。")]),t._v(" "),a("p",[t._v("这说明，我前面这个测试用例，把队列给塞满了，从而导致 Tomcat 线程池启用了最大线程数：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091513992.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("嗯，一定是这样的！")]),t._v(" "),a("p",[t._v("那么，现在的关键问题就是：Tomcat 线程池默认的队列长度是多少呢？")]),t._v(" "),a("p",[t._v("在当前的这个 Debug 模式下，队列长度可以通过 Alt+F8 进行查看：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091513824.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("wc，这个值是 Integer.MAX_VALUE，这么大？")]),t._v(" "),a("p",[t._v("我一共也才 1000 个任务，不可能被占满啊？")]),t._v(" "),a("p",[t._v("一个线程池：")]),t._v(" "),a("ul",[a("li",[t._v("核心线程数，值为 10。")]),t._v(" "),a("li",[t._v("最大线程数，值为 200。")]),t._v(" "),a("li",[t._v("队列长度，值为 Integer.MAX_VALUE。\n1000 个比较耗时的任务过来之后，应该是只有 10 个线程在工作，然后剩下的 990 个进队列才对啊？")])]),t._v(" "),a("p",[t._v("难道我八股文背错了？")]),t._v(" "),a("p",[t._v("这个时候不要慌，嗦根辣条冷静一下。")]),t._v(" "),a("p",[t._v("目前已知的是核心线程数，值为 10。这 10 个线程的工作流程是符合我们认知的。")]),t._v(" "),a("p",[t._v("但是第 11 个任务过来的时候，本应该进入队列去排队。")]),t._v(" "),a("p",[t._v("现在看起来，是直接启用最大线程数了。")]),t._v(" "),a("p",[t._v("所以，我们先把测试用例修改一下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091513553.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("那么问题就来了：最后一个请求到底是怎么提交到线程池里面的？")]),t._v(" "),a("p",[t._v("前面说了，Tomcat 的线程池源码和 JDK 的基本一样。")]),t._v(" "),a("p",[t._v("往线程池里面提交任务的时候，会执行 execute 这个方法：")]),t._v(" "),a("blockquote",[a("p",[t._v("org.apache.Tomcat.util.threads.ThreadPoolExecutor#execute(java.lang.Runnable)")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091513258.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("对于 Tomcat 它会调用到 executeInternal 这个方法：")]),t._v(" "),a("blockquote",[a("p",[t._v("org.apache.Tomcat.util.threads.ThreadPoolExecutor#executeInternal")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091514709.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("这个方法里面，标号为 ① 的地方，就是判断当前工作线程数是否小于核心线程数，小于则直接调用 addWorker 方法，创建线程。")]),t._v(" "),a("p",[t._v("标号为 ② 的地方主要是调用了 offer 方法，看看队列里面是否还能继续添加任务。")]),t._v(" "),a("p",[t._v("如果不能继续添加，说明队列满了，则来到标号为 ③ 的地方，看看是否能执行 addWorker 方法，创建非核心线程，即启用最大线程数。")]),t._v(" "),a("p",[t._v("把这个逻辑捋顺之后，接下来我们应该去看哪部分的代码，就很清晰了。")]),t._v(" "),a("p",[t._v("主要就是去看 workQueue.offer(command) 这个逻辑。")]),t._v(" "),a("p",[t._v("如果返回 true 则表示加入到队列，返回 false 则表示启用最大线程数嘛。")]),t._v(" "),a("p",[t._v("这个 workQueue 是 TaskQueue，看起来一点也不眼熟：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091514001.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("当然不眼熟了，因为这个是 Tomcat 自己基于 LinkedBlockingQueue 搞的一个队列。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091514983.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("问题的答案就藏在 TaskQueue 的 offer 方法里面。")]),t._v(" "),a("p",[t._v("所以我重点带你盘一下这个 offer 方法：")]),t._v(" "),a("p",[t._v("org.apache.Tomcat.util.threads.TaskQueue#offer")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091514685.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("标号为 ① 的地方，判断了 parent 是否为 null，如果是则直接调用父类的 offer 方法。说明要启用这个逻辑，我们的 parent 不能为 null。")]),t._v(" "),a("p",[t._v("那么这个 parent 是什么玩意，从哪里来的呢？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091515800.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("parent 就是 Tomcat 线程池，通过其 set 方法可以知道，是在线程池完成初始化之后，进行了赋值。")]),t._v(" "),a("p",[t._v("也就是说，你可以理解为，在 Tomcat 的场景下，parent 不会为空。")]),t._v(" "),a("p",[t._v("标号为 ② 的地方，调用了 getPoolSizeNoLock 方法：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091515629.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("这个方法是获取当前线程池中有多个线程。")]),t._v(" "),a("p",[t._v("所以如果这个表达式为 true：")]),t._v(" "),a("blockquote",[a("p",[t._v("parent.getPoolSizeNoLock() == parent.getMaximumPoolSize()")])]),t._v(" "),a("p",[t._v("就表明当前线程池的线程数已经是配置的最大线程数了，那就调用 offer 方法，把当前请求放到到队列里面去。")]),t._v(" "),a("p",[t._v("标号为 ③ 的地方，是判断已经提交到线程池里面待执行或者正在执行的任务个数，是否比当前线程池的线程数还少。")]),t._v(" "),a("p",[t._v("如果是，则说明当前线程池有空闲线程可以执行任务，则把任务放到队列里面去，就会被空闲线程给取走执行。")]),t._v(" "),a("p",[t._v("然后，关键的来了，标号为 ④ 的地方。")]),t._v(" "),a("p",[t._v("如果当前线程池的线程数比线程池配置的最大线程数还少，则返回 false。")]),t._v(" "),a("p",[t._v("前面说了，offer 方法返回 false，会出现什么情况？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091515276.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("是不是直接开始到上图中标号为 ③ 的地方，去尝试添加非核心线程了？")]),t._v(" "),a("p",[t._v("也就是启用最大线程数这个配置了。")]),t._v(" "),a("p",[t._v("所以，朋友们，这个是什么情况？")]),t._v(" "),a("p",[t._v("这个情况确实就和我们背的线程池的八股文不一样了啊。")]),t._v(" "),a("p",[t._v("**JDK 的线程池，是先使用核心线程数配置，接着使用队列长度，最后再使用最大线程配置。")]),t._v(" "),a("p",[a("strong",[t._v("Tomcat 的线程池，就是先使用核心线程数配置，再使用最大线程配置，最后才使用队列长度。")])]),t._v(" "),a("p",[t._v("所以，以后当面试官给你说：我们聊聊线程池的工作机制吧？")]),t._v(" "),a("p",[t._v("你就先追问一句：你是说的 JDK 的线程池呢还是 Tomcat 的线程池呢，因为这两个在运行机制上有一点差异。")]),t._v(" "),a("p",[t._v("然后，你就看他的表情。")]),t._v(" "),a("p",[t._v("如果透露出一丝丝迟疑，然后轻描淡写的说一句：那就对比着说一下吧。")]),t._v(" "),a("p",[t._v("那么恭喜你，在这个题目上开始掌握了一点主动权。")]),t._v(" "),a("h1",{attrs:{id:"加深"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加深"}},[t._v("#")]),t._v(" 加深")]),t._v(" "),a("p",[t._v("最后，为了让你更加深刻的理解到 Tomcat 线程池和 JDK 线程池的不一样，我给你搞一个直接复制过去就能运行的代码。")]),t._v(" "),a("p",[t._v("当你把 taskqueue.setParent(executor) 这行代码注释掉的时候，它的运行机制就是 JDK 的线程池。")]),t._v(" "),a("p",[t._v("当存在这行代码的时候，它的运行机制就变成了 Tomcat 的线程池。")]),t._v(" "),a("p",[t._v("玩去吧。")]),t._v(" "),a("div",{staticClass:"language-Java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("apache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tomcat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("threads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TaskQueue")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("apache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tomcat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("threads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TaskThreadFactory")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("apache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tomcat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("threads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TomcatThreadPoolExecutorTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" namePrefix "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"歪歪歪-exec-"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" daemon "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TaskQueue")]),t._v(" taskqueue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TaskQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TaskThreadFactory")]),t._v(" tf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TaskThreadFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("namePrefix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" daemon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NORM_PRIORITY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),t._v(" executor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MILLISECONDS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" taskqueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        taskqueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setParent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("logStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"创建任务"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("logStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),t._v(" executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TaskQueue")]),t._v(" queue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TaskQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-:"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"核心线程数:"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCorePoolSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\t活动线程数:"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getActiveCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\t最大线程数:"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMaximumPoolSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\t总任务数:"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTaskCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\t当前排队线程数:"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\t队列剩余大小:"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remainingCapacity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("等等\n如果你之前确实没了解过 Tomcat 线程池的工作机制，那么看到这里的时候也许你会觉得确实是有一点点收获。")]),t._v(" "),a("p",[t._v("但是，注意我要说但是了。")]),t._v(" "),a("p",[t._v("还记得最开始的时候面试官的问题吗？")]),t._v(" "),a("p",[t._v("面试官的原问题就是：一个 SpringBoot 项目能同时处理多少请求？")]),t._v(" "),a("p",[t._v("那么请问，前面我讲了这么大一坨 Tomcat 线程池运行原理，这个回答，和这个问题匹配吗？")]),t._v(" "),a("p",[t._v("是的，除了最开始提出的 200 这个数值之外，并不匹配，甚至在面试官的眼里完全是答非所问了。")]),t._v(" "),a("p",[t._v("所以，为了把这两个“并不匹配”的东西比较顺畅的链接起来，你必须要先回答面试官的问题，然后再开始扩展。")]),t._v(" "),a("p",[t._v("比如这样答：一个未进行任何特殊配置，全部采用默认设置的 SpringBoot 项目，这个项目同一时刻最多能同时处理多少请求，取决于我们使用的 web 容器，而 SpringBoot 默认使用的是 Tomcat。")]),t._v(" "),a("p",[t._v("Tomcat 的默认核心线程数是 10，最大线程数 200，队列长度是无限长。但是由于其运行机制和 JDK 线程池不一样，在核心线程数满了之后，会直接启用最大线程数。所以，在默认的配置下，同一时刻，可以处理 200 个请求。")]),t._v(" "),a("p",[t._v("在实际使用过程中，应该基于服务实际情况和服务器配置等相关消息，对该参数进行评估设置。")]),t._v(" "),a("p",[t._v("这个回答就算是差不多了。")]),t._v(" "),a("h1",{attrs:{id:"server-tomcat-max-connections"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#server-tomcat-max-connections"}},[t._v("#")]),t._v(" server.tomcat.max-connections")]),t._v(" "),a("p",[t._v("但是，如果很不幸，如果你遇到了我，为了验证你是真的自己去摸索过，还是仅仅只是看了几篇文章，我可能还会追问一下：")]),t._v(" "),a("p",[t._v("那么其他什么都不动，如果我仅仅加入 server.tomcat.max-connections=10 这个配置呢，那么这个时候最多能处理多少个请求？")]),t._v(" "),a("p",[t._v("你可能就要猜了：10 个。")]),t._v(" "),a("p",[t._v("是的，我重新提交 1000 个任务过来，在控制台输出的确实是 10 个，")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091515509.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("那么 max-connections 这个参数它怎么也能控制请求个数呢？")]),t._v(" "),a("p",[t._v("为什么在前面的分析过程中我们并没有注意到这个参数呢？")]),t._v(" "),a("p",[t._v("首先我们看一下它的默认值：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091516922.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("因为它的默认值是 8192，比最大线程数 200 大，这个参数并没有限制到我们，所以我们没有关注到它。")]),t._v(" "),a("p",[t._v("当我们把它调整为 10 的时候，小于最大线程数 200，它就开始变成限制项了。")]),t._v(" "),a("p",[t._v("那么 max-connections 这个参数到底是干啥的呢？")]),t._v(" "),a("p",[t._v("你先自己去摸索摸索吧。")]),t._v(" "),a("p",[t._v("同时，还有这样的一个参数，默认是 100：")]),t._v(" "),a("blockquote",[a("p",[t._v("server.tomcat.accept-count=100")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091516105.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("它又是干什么的呢？")]),t._v(" "),a("p",[t._v("“和连接数有关”，我只能提示到这里了，自己去摸索吧。")]),t._v(" "),a("p",[t._v("再等等\n通过前面的分析，我们知道了，要回答“一个 SpringBoot 项目默认能处理的任务数”，这个问题，得先明确其使用的 web 容器。")]),t._v(" "),a("p",[t._v("那么问题又来了：SpringBoot 内置了哪些容器呢？")]),t._v(" "),a("blockquote",[a("p",[t._v("Tomcat、Jetty、Netty、Undertow")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091516918.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("前面我们都是基于 Tomcat 分析的，如果我们换一个容器呢？")]),t._v(" "),a("p",[t._v("比如换成 Undertow，这个玩意我只是听过，没有实际使用过，它对我来说就是一个黑盒。")]),t._v(" "),a("p",[t._v("管它的，先换了再说。")]),t._v(" "),a("p",[t._v("从 Tomcat 换成 Undertow，只需要修改 Maven 依赖即可，其他什么都不需要动：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091516893.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("再次启动项目，从日志可以发现已经修改为了 Undertow 容器：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091516568.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("此时我再次执行 MainTest 方法，还是提交 1000 个请求：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091517870.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("从日志来看，发现只有 48 个请求被处理了。")]),t._v(" "),a("p",[t._v("就很懵逼，48 是怎么回事儿，怎么都不是一个整数呢，这让强迫症很难受啊。")]),t._v(" "),a("p",[t._v("这个时候你的想法是什么，是不是想要看看 48 这个数字到底是从哪里来的？")]),t._v(" "),a("p",[t._v("怎么看？")]),t._v(" "),a("p",[t._v("之前找 Tomcat 的 200 的时候不是才教了你的嘛，直接往 Undertow 上套就行了嘛。")]),t._v(" "),a("p",[t._v("打线程 Dump，然后看堆栈消息：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091517962.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("发现 EnhancedQueueExecutor 这个线程池，接着在这个类里面去找构建线程池时的参数。")]),t._v(" "),a("p",[t._v("很容易就找到了这个构造方法：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091517133.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("所以，在这里打上断点，重启项目。")]),t._v(" "),a("p",[t._v("通过 Debug 可以知道，关键参数都是从 builder 里面来的。")]),t._v(" "),a("p",[t._v("而 builder 里面，coreSize 和 maxSize 都是 48，队列长度是 Integer.MAX_VALUE。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091517063.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("所以看一下 Builder 里面的 coreSize 是怎么来的。")]),t._v(" "),a("p",[t._v("点过来发现 coreSize 的默认值是 16：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091517248.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("不要慌，再打断点，再重启项目。")]),t._v(" "),a("p",[t._v("然后你会在它的 setCorePoolSize 方法处停下来，而这个方法的入参就是我们要找的 48：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091517783.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("顺藤摸瓜，重复几次打断点、重启的动作之后，你会找到 48 是一个名为 WORKER_TASK_CORE_THREADS 的变量，是从这里来的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091517431.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("而 WORKER_TASK_CORE_THREADS 这个变量设置的地方是这样的：")]),t._v(" "),a("blockquote",[a("p",[t._v("io.undertow.Undertow#start")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091518838.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("而这里的 workerThreads 取值是这样的：")]),t._v(" "),a("blockquote",[a("p",[t._v("io.undertow.Undertow.Builder#Builder")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091518548.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("取的是机器的 CPU 个数乘以 8。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.bejavaer.top/blog/202308091518542.png",alt:"image.png"}})]),t._v(" "),a("p",[t._v("所以我这里是 6*8=48。")]),t._v(" "),a("p",[t._v("哦，真相大白，原来 48 是这样来的。")]),t._v(" "),a("p",[t._v("没意思。")]),t._v(" "),a("p",[t._v("确实没意思，但是既然都已经替换为 Undertow 了，那么你去研究一下它的 NIO ByteBuffer、NIO Channel、BufferPool、XNIO Worker、IO 线程池、Worker 线程池...")]),t._v(" "),a("p",[t._v("然后再和 Tomcat 对比着学，")]),t._v(" "),a("p",[t._v("就开始有点意思了。")]),t._v(" "),a("p",[t._v("转载：公众号：捡田螺的小男孩")])])}),[],!1,null,null,null);a.default=e.exports}}]);